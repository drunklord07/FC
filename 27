#!/bin/bash

set -euo pipefail

TMP_RESULT="/tmp/iam_role_policy_audit.txt"
> "$TMP_RESULT"

MAX_PARALLEL=20

echo "🔍 Auditing IAM Roles for overly permissive managed and inline policies..."

# External Python script
PYTHON_CHECKER=$(mktemp /tmp/role_policy_checker.XXXX.py)
cat > "$PYTHON_CHECKER" <<'EOF'
import sys, json, base64

context = sys.argv[1]
outfile = sys.argv[2]
b64doc = sys.argv[3]

policy = json.loads(base64.b64decode(b64doc).decode())

def is_wild(val):
    if isinstance(val, str):
        return val == "*" or val.endswith("*")
    if isinstance(val, list):
        return any(v == "*" or v.endswith("*") for v in val)
    return False

risk_found = False
statements = policy.get("Statement", [])
if not isinstance(statements, list):
    statements = [statements]

for stmt in statements:
    if stmt.get("Effect") != "Allow":
        continue

    action = stmt.get("Action", [])
    resource = stmt.get("Resource", [])
    not_action = stmt.get("NotAction")

    if isinstance(action, str): action = [action]
    if isinstance(resource, str): resource = [resource]

    if "*" in action and "*" in resource:
        msg = f"FAIL\t{context}\tFull '*:*' access"
        risk_found = True
        break
    if any(a.startswith("iam:") for a in action) and "*" in resource:
        msg = f"FAIL\t{context}\tAllows 'iam:*' on *"
        risk_found = True
        break
    if "iam:PassRole" in action and is_wild(resource):
        msg = f"FAIL\t{context}\tAllows 'iam:PassRole' on wildcard resource"
        risk_found = True
        break
    if not_action:
        msg = f"WARNING\t{context}\tContains NotAction with Allow"
        risk_found = True
        break

if not risk_found:
    msg = f"PASS\t{context}\tNo risky permissions detected"

with open(outfile, "a") as f:
    f.write(msg + "\n")
EOF

# Function to evaluate a single policy document
check_policy_json() {
  local JSON="$1"
  local CONTEXT="$2"
  local B64_JSON
  B64_JSON=$(echo "$JSON" | base64 | tr -d '\n')

  python3 "$PYTHON_CHECKER" "$CONTEXT" "$TMP_RESULT" "$B64_JSON"
}

# Audit one role
audit_role() {
  local ROLE_NAME="$1"

  # Attached managed policies
  aws iam list-attached-role-policies --role-name "$ROLE_NAME" \
    --query "AttachedPolicies[*].PolicyArn" --output text | tr '\t' '\n' | while read -r POLICY_ARN; do
    {
      VERSION_ID=$(aws iam get-policy --policy-arn "$POLICY_ARN" --query "Policy.DefaultVersionId" --output text 2>/dev/null) || return
      POLICY_DOC=$(aws iam get-policy-version --policy-arn "$POLICY_ARN" --version-id "$VERSION_ID" --query "PolicyVersion.Document" --output json 2>/dev/null) || return
      check_policy_json "$POLICY_DOC" "$ROLE_NAME (managed: $POLICY_ARN)"
    } &
  done

  # Inline policies
  aws iam list-role-policies --role-name "$ROLE_NAME" --query "PolicyNames" --output text | tr '\t' '\n' | while read -r POLICY_NAME; do
    {
      INLINE_DOC=$(aws iam get-role-policy --role-name "$ROLE_NAME" --policy-name "$POLICY_NAME" --query "PolicyDocument" --output json 2>/dev/null) || return
      check_policy_json "$INLINE_DOC" "$ROLE_NAME (inline: $POLICY_NAME)"
    } &
  done
}

# Progress setup
ROLE_NAMES=($(aws iam list-roles --query "Roles[*].RoleName" --output text))
TOTAL=${#ROLE_NAMES[@]}
COUNT=0

show_progress() {
  local done=$1
  local total=$2
  local percent=$((done * 100 / total))
  printf "\rProgress: %3d%% [%d/%d]" "$percent" "$done" "$total"
}

# Run audit in parallel for each role
PIDS=()
for ROLE in "${ROLE_NAMES[@]}"; do
  audit_role "$ROLE" &
  PIDS+=($!)
  ((COUNT++))
  show_progress "$COUNT" "$TOTAL"

  if (( ${#PIDS[@]} >= MAX_PARALLEL )); then
    wait -n
    # Remove finished PIDs
    for i in "${!PIDS[@]}"; do
      if ! kill -0 "${PIDS[i]}" 2>/dev/null; then
        unset 'PIDS[i]'
      fi
    done
  fi
done

wait
show_progress "$TOTAL" "$TOTAL"
echo -e "\n✅ Audit complete.\n"

# Report
echo -e "===== IAM ROLE POLICY RISK AUDIT ====="
printf "STATUS\tCONTEXT\tDETAIL\n"
sort "$TMP_RESULT"

TOTAL=$(wc -l < "$TMP_RESULT")
FAILS=$(grep -c "^FAIL" "$TMP_RESULT" || true)
WARNS=$(grep -c "^WARNING" "$TMP_RESULT" || true)
PASSES=$(grep -c "^PASS" "$TMP_RESULT" || true)

echo -e "\nSUMMARY:"
echo "Total policies evaluated:  $TOTAL"
echo "FAIL (risky):              $FAILS"
echo "WARNING (needs review):    $WARNS"
echo "PASS (compliant):          $PASSES"

rm -f "$TMP_RESULT" "$PYTHON_CHECKER"
