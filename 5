#!/bin/bash

echo "Auditing IAM SSL/TLS server certificates for expiration"

# Initialize counters
TOTAL=0
EXPIRED=0
VALID=0
EXPIRED_CERT_ARNS=()

# Get current UTC date in ISO format
NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

# Create a temp file to store JSON
TMPFILE=$(mktemp)
aws iam list-server-certificates --output json > "$TMPFILE"

# Use Python to evaluate the certs
python3 - "$TMPFILE" "$NOW" <<'EOF'
import json
from datetime import datetime, timezone
import sys

json_path = sys.argv[1]
now_str = sys.argv[2]
now = datetime.strptime(now_str, '%Y-%m-%dT%H:%M:%SZ')

with open(json_path, 'r') as f:
    certs = json.load(f)

valid_count = 0
expired_count = 0
total = 0
expired_arns = []

for cert in certs.get('ServerCertificateMetadataList', []):
    total += 1
    name = cert.get('ServerCertificateName')
    arn = cert.get('Arn')
    exp_str = cert.get('Expiration')
    try:
        exp = datetime.strptime(exp_str, '%Y-%m-%dT%H:%M:%SZ')
        delta = (exp - now).days
        print(f"\nCertificate: {name}")
        print(f"  ➤ Expiration Date: {exp_str}")
        if delta < 0:
            print(f"  ⚠️  Status: EXPIRED ({abs(delta)} days ago)")
            expired_count += 1
            expired_arns.append(arn)
        else:
            print(f"  ✅ Status: VALID (expires in {delta} days)")
            valid_count += 1
    except Exception as e:
        print(f"\nCertificate: {name}")
        print("  ⚠️  Error parsing expiration date")

# Summary
print("\n===== AUDIT SUMMARY =====")
print(f"Total Certificates:     {total}")
print(f"Valid Certificates:     {valid_count}")
print(f"Expired Certificates:   {expired_count}")

if expired_arns:
    print("\nExpired Certificate ARNs:")
    for arn in expired_arns:
        print(f"  - {arn}")
else:
    print("\n✅ All IAM certificates are valid.")
EOF

# Cleanup
rm -f "$TMPFILE"
