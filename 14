#!/bin/bash

REGION="ap-south-1"
echo "Auditing RDS and Aurora DBs for SSL/TLS enforcement in region: $REGION"

# Initialize temporary file
AUDIT_OUTPUT="/tmp/rds_ssl_audit.txt"
> "$AUDIT_OUTPUT"

# === Audit Standard RDS DB Instances ===
DB_INSTANCES=$(aws rds describe-db-instances --region "$REGION" --query 'DBInstances[*].{Id:DBInstanceIdentifier,Engine:Engine,Arn:DBInstanceArn}' --output json)

echo "$DB_INSTANCES" | python3 - <<EOF | tee -a "$AUDIT_OUTPUT"
import json
import subprocess
import sys

instances = json.load(sys.stdin)

for db in instances:
    db_id = db['Id']
    engine = db['Engine']
    arn = db['Arn']
    param_name = 'rds.force_ssl' if 'postgres' in engine or 'sqlserver' in engine else 'require_secure_transport'

    try:
        param_group = subprocess.check_output([
            'aws', 'rds', 'describe-db-instances',
            '--region', '$REGION',
            '--db-instance-identifier', db_id,
            '--query', 'DBInstances[0].DBParameterGroups[0].DBParameterGroupName',
            '--output', 'text'
        ]).decode().strip()
    except Exception as e:
        print(f"\nDatabase: {db_id}")
        print("  ⚠️  Error fetching parameter group")
        continue

    try:
        value = subprocess.check_output([
            'aws', 'rds', 'describe-db-parameters',
            '--region', '$REGION',
            '--db-parameter-group-name', param_group,
            '--query', f"Parameters[?ParameterName=='{param_name}'].ParameterValue",
            '--output', 'text'
        ]).decode().strip()
    except Exception:
        value = ''

    print(f"\nDatabase: {db_id}")
    print(f"  ➤ Engine: {engine}")
    print(f"  ➤ Parameter: {param_name} = {value if value else 'Not Set'}")

    if value in ['1', 'ON']:
        print("  ✅ Enforces SSL")
    else:
        print("  ⚠️  Does NOT enforce SSL")
        print(f"  ARN: {arn}")
EOF

# === Audit Aurora DB Clusters ===
CLUSTERS=$(aws rds describe-db-clusters --region "$REGION" --query 'DBClusters[*].{Id:DBClusterIdentifier,Engine:Engine,Arn:DBClusterArn}' --output json)

echo "$CLUSTERS" | python3 - <<EOF | tee -a "$AUDIT_OUTPUT"
import json
import subprocess
import sys

clusters = json.load(sys.stdin)

for cluster in clusters:
    cid = cluster['Id']
    engine = cluster['Engine']
    arn = cluster['Arn']
    param_name = 'rds.force_ssl' if 'postgres' in engine else 'require_secure_transport'

    try:
        param_group = subprocess.check_output([
            'aws', 'rds', 'describe-db-clusters',
            '--region', '$REGION',
            '--db-cluster-identifier', cid,
            '--query', 'DBClusters[0].DBClusterParameterGroup',
            '--output', 'text'
        ]).decode().strip()
    except Exception:
        print(f"\nAurora Cluster: {cid}")
        print("  ⚠️  Error fetching parameter group")
        continue

    try:
        value = subprocess.check_output([
            'aws', 'rds', 'describe-db-cluster-parameters',
            '--region', '$REGION',
            '--db-cluster-parameter-group-name', param_group,
            '--query', f"Parameters[?ParameterName=='{param_name}'].ParameterValue",
            '--output', 'text'
        ]).decode().strip()
    except Exception:
        value = ''

    print(f"\nAurora Cluster: {cid}")
    print(f"  ➤ Engine: {engine}")
    print(f"  ➤ Parameter: {param_name} = {value if value else 'Not Set'}")

    if value in ['1', 'ON']:
        print("  ✅ Enforces SSL")
    else:
        print("  ⚠️  Does NOT enforce SSL")
        print(f"  ARN: {arn}")
EOF

# === Summary
TOTAL=$(grep -c -E '^Database:|^Aurora Cluster:' "$AUDIT_OUTPUT")
COMPLIANT=$(grep -c '✅ Enforces SSL' "$AUDIT_OUTPUT")
NON_COMPLIANT=$(grep -c '⚠️  Does NOT enforce SSL' "$AUDIT_OUTPUT")
NON_COMPLIANT_ARNS=$(grep 'ARN: ' "$AUDIT_OUTPUT" | awk -F'ARN: ' '{print $2}')

echo -e "\n===== AUDIT SUMMARY ====="
echo "Total DB Instances/Clusters: $TOTAL"
echo "Compliant:                   $COMPLIANT"
echo "Non-Compliant:               $NON_COMPLIANT"

if [ "$NON_COMPLIANT" -gt 0 ]; then
  echo -e "\nNon-Compliant ARNs:"
  echo "$NON_COMPLIANT_ARNS"
else
  echo -e "\n✅ All RDS and Aurora databases enforce SSL"
fi
