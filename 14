#!/bin/bash

REGION="ap-south-1"
echo "🔍 Auditing RDS and Aurora databases for SSL/TLS enforcement in region: $REGION"

AUDIT_OUTPUT="/tmp/rds_ssl_audit.txt"
DB_FILE="/tmp/rds_instances.json"
CLUSTER_FILE="/tmp/rds_clusters.json"
> "$AUDIT_OUTPUT"

# === Fetch and Save Instance/Cluster Metadata ===
aws rds describe-db-instances \
  --region "$REGION" \
  --query 'DBInstances[*].{Id:DBInstanceIdentifier,Engine:Engine,Arn:DBInstanceArn}' \
  --output json > "$DB_FILE"

aws rds describe-db-clusters \
  --region "$REGION" \
  --query 'DBClusters[*].{Id:DBClusterIdentifier,Engine:Engine,Arn:DBClusterArn}' \
  --output json > "$CLUSTER_FILE"

# === Python Audit Script ===
python3 - "$REGION" "$DB_FILE" "$CLUSTER_FILE" "$AUDIT_OUTPUT" <<'EOF'
import json, subprocess, sys, os

region = sys.argv[1]
db_file = sys.argv[2]
cluster_file = sys.argv[3]
output_file = sys.argv[4]

def write(line):
    with open(output_file, 'a') as out:
        out.write(line + "\n")
    print(line)

# === RDS Instances ===
try:
    with open(db_file, 'r') as f:
        dbs = json.load(f)
except Exception as e:
    write(f"❌ Failed to load RDS DB instances: {e}")
    sys.exit(1)

for db in dbs:
    db_id = db['Id']
    engine = db['Engine']
    arn = db['Arn']
    param = "rds.force_ssl" if "postgres" in engine or "sqlserver" in engine else "require_secure_transport"

    try:
        pg_name = subprocess.check_output([
            "aws", "rds", "describe-db-instances",
            "--region", region,
            "--db-instance-identifier", db_id,
            "--query", "DBInstances[0].DBParameterGroups[0].DBParameterGroupName",
            "--output", "text"
        ]).decode().strip()
    except:
        write(f"\nDatabase: {db_id}\n  ⚠️  Error fetching parameter group.")
        continue

    try:
        val = subprocess.check_output([
            "aws", "rds", "describe-db-parameters",
            "--region", region,
            "--db-parameter-group-name", pg_name,
            "--query", f"Parameters[?ParameterName=='{param}'].ParameterValue",
            "--output", "text"
        ]).decode().strip() or "Not Set"
    except:
        val = "Not Set"

    write(f"\nDatabase: {db_id}")
    write(f"  ➤ Engine: {engine}")
    write(f"  ➤ Parameter: {param} = {val}")
    if val in ["1", "ON"]:
        write("  ✅ Enforces SSL")
    else:
        write("  ⚠️  Does NOT enforce SSL")
        write(f"  ARN: {arn}")

# === Aurora Clusters ===
try:
    with open(cluster_file, 'r') as f:
        clusters = json.load(f)
except Exception as e:
    write(f"❌ Failed to load Aurora clusters: {e}")
    sys.exit(1)

for cl in clusters:
    cid = cl['Id']
    engine = cl['Engine']
    arn = cl['Arn']
    param = "rds.force_ssl" if "postgres" in engine else "require_secure_transport"

    try:
        pg_name = subprocess.check_output([
            "aws", "rds", "describe-db-clusters",
            "--region", region,
            "--db-cluster-identifier", cid,
            "--query", "DBClusters[0].DBClusterParameterGroup",
            "--output", "text"
        ]).decode().strip()
    except:
        write(f"\nAurora Cluster: {cid}\n  ⚠️  Error fetching parameter group.")
        continue

    try:
        val = subprocess.check_output([
            "aws", "rds", "describe-db-cluster-parameters",
            "--region", region,
            "--db-cluster-parameter-group-name", pg_name,
            "--query", f"Parameters[?ParameterName=='{param}'].ParameterValue",
            "--output", "text"
        ]).decode().strip() or "Not Set"
    except:
        val = "Not Set"

    write(f"\nAurora Cluster: {cid}")
    write(f"  ➤ Engine: {engine}")
    write(f"  ➤ Parameter: {param} = {val}")
    if val in ["1", "ON"]:
        write("  ✅ Enforces SSL")
    else:
        write("  ⚠️  Does NOT enforce SSL")
        write(f"  ARN: {arn}")
EOF

# === Summary
TOTAL=$(grep -cE '^Database:|^Aurora Cluster:' "$AUDIT_OUTPUT")
COMPLIANT=$(grep -c '✅ Enforces SSL' "$AUDIT_OUTPUT")
NON_COMPLIANT=$(grep -c '⚠️  Does NOT enforce SSL' "$AUDIT_OUTPUT")
NON_COMPLIANT_ARNS=$(grep 'ARN: ' "$AUDIT_OUTPUT" | awk -F'ARN: ' '{print $2}')

echo -e "\n===== AUDIT SUMMARY ====="
echo "Total DB Instances/Clusters: $TOTAL"
echo "Compliant:                   $COMPLIANT"
echo "Non-Compliant:               $NON_COMPLIANT"

if [ "$NON_COMPLIANT" -gt 0 ]; then
  echo -e "\nNon-Compliant ARNs:"
  echo "$NON_COMPLIANT_ARNS"
else
  echo -e "\n✅ All RDS and Aurora databases enforce SSL"
fi
